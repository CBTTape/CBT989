/*                                                         rexx
 Control - read and format

 Read control member, each entry has the format keyword(data). The data
 may be split over multiple lines, but only one entry per line.

*/
 arg p
 parse value ' 'p  with p1 'DD('$dd')' p2
 parse value p1 p2 with p1 'PREFIX('$pfx')' p2
 if $pfx='' then,
 parse value p1 p2 with p1 'PFX('$pfx')' p2
 parse value p1 p2 with p1 'ADDLEN('$al')' p2
 if $al='' then,
 parse value p1 p2 with p1 'AL('$al')' p2
 if p1 p2<>'' then return 8 'Bad parm:' space(p1 p2)
 "execio * diskr" $dd "(stem c. finis)"
 if rc<>0 then return 8 'Read error' rc
 $al=(translate($al)='Y')

 k='DFLT'
 rsp=''
 do cn=1 to c.0
   s=c.cn
   if left(s,1)='*' | s = '' then iterate
   if pos('(',s)>0 then do /* new */
     parse var s k . '(' s
     k=$pfx''k
     zz=value(k,'')
   end
   l=0
   if pos(')',s)>0 then do /* end */
     parse var s s ')' .
     l=1
   end
   zz=value(k,value(k) s)
   if l then do
     if $al then zz=value(k,AddLen(value(k)))
     else        zz=value(k,space(value(k)))
     rsp=rsp";"k"='"value(k)"'"
   end
 end
 exit 0 rsp

AddLen: Procedure
 parse arg p
 r=''
 do n=1 to words(p)
   w=word(p,n)
   r=r w length(w)
 end
 return strip(r)
